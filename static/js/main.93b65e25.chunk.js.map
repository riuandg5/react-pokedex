{"version":3,"sources":["Pokecard.js","Pokedex.js","App.js","serviceWorker.js","index.js"],"names":["Pokecard","_this$props","this","props","id","name","type","exp","imgSrc","concat","react_default","a","createElement","index_es","style","maxWidth","display","flexDirection","alignItems","variant","color","src","alt","height","align","Component","Pokedex","container","justify","paddingBottom","background","item","xs","padding","lg","md","spacing","pokemon","map","p","i","key","src_Pokecard","defaultProps","App","Fragment","src_Pokedex","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0PAgCeA,mLA3BJ,IAAAC,EACyBC,KAAKC,MAA7BC,EADDH,EACCG,GAAIC,EADLJ,EACKI,KAAMC,EADXL,EACWK,KAAMC,EADjBN,EACiBM,IAClBC,EAAM,GAAAC,OALC,2DAKD,KAAAA,OAAkBL,EAAlB,QACZ,OACEM,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,SAAU,UACvBL,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,MAAO,CACLE,QAAS,OACTC,cAAe,SACfC,WAAY,WAGdR,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYM,QAAQ,QAAQC,MAAM,WAC/Bf,GAEHK,EAAAC,EAAAC,cAAA,OAAKS,IAAKb,EAAQc,IAAKjB,EAAMkB,OAAO,UACpCb,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYM,QAAQ,YAAYK,MAAM,UAAtC,SACSlB,EACPI,EAAAC,EAAAC,cAAA,WAFF,QAGQL,YApBKkB,aCAjBC,mLAkBF,OACEhB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEc,WAAS,EACTC,QAAQ,SACRd,MAAO,CAAEe,cAAe,OAAQC,WAAY,SAE5CpB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEkB,MAAI,EACJC,GAAI,EACJL,WAAS,EACTC,QAAQ,SACRd,MAAO,CAAEmB,QAAS,SAElBvB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYM,QAAQ,KAAKC,MAAM,WAA/B,YAIFV,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMkB,MAAI,EAACG,GAAI,EAAGC,GAAI,EAAGR,WAAS,EAACS,QAAS,IACzClC,KAAKC,MAAMkC,QAAQC,IAAI,SAACC,EAAGC,GAAJ,OACtB9B,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMkB,MAAI,EAACG,GAAI,EAAGC,GAAI,EAAGR,WAAS,EAACC,QAAQ,SAASa,IAAKD,GACvD9B,EAAAC,EAAAC,cAAC8B,EAAD,CAAUtC,GAAImC,EAAEnC,GAAIC,KAAMkC,EAAElC,KAAMC,KAAMiC,EAAEjC,KAAMC,IAAKgC,EAAEhC,kBAtC/CkB,aAAhBC,EACGiB,aAAe,CACpBN,QAAS,CACP,CAAEjC,GAAI,MAAOC,KAAM,aAAcC,KAAM,OAAQC,IAAK,IACpD,CAAEH,GAAI,MAAOC,KAAM,WAAYC,KAAM,QAASC,IAAK,IACnD,CAAEH,GAAI,MAAOC,KAAM,UAAWC,KAAM,MAAOC,IAAK,IAChD,CAAEH,GAAI,MAAOC,KAAM,aAAcC,KAAM,OAAQC,IAAK,IACpD,CAAEH,GAAI,MAAOC,KAAM,WAAYC,KAAM,QAASC,IAAK,IACnD,CAAEH,GAAI,MAAOC,KAAM,UAAWC,KAAM,MAAOC,IAAK,IAChD,CAAEH,GAAI,MAAOC,KAAM,aAAcC,KAAM,OAAQC,IAAK,IACpD,CAAEH,GAAI,MAAOC,KAAM,WAAYC,KAAM,QAASC,IAAK,IACnD,CAAEH,GAAI,MAAOC,KAAM,UAAWC,KAAM,MAAOC,IAAK,IAChD,CAAEH,GAAI,MAAOC,KAAM,aAAcC,KAAM,OAAQC,IAAK,IACpD,CAAEH,GAAI,MAAOC,KAAM,WAAYC,KAAM,QAASC,IAAK,IACnD,CAAEH,GAAI,MAAOC,KAAM,UAAWC,KAAM,MAAOC,IAAK,MAiCvCmB,QCtCAkB,MATf,WACE,OACElC,EAAAC,EAAAC,cAACF,EAAAC,EAAMkC,SAAP,KACEnC,EAAAC,EAAAC,cAACC,EAAA,EAAD,MACAH,EAAAC,EAAAC,cAACkC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.93b65e25.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Card, CardContent, Typography } from '@material-ui/core';\r\nconst POKE_API = 'http://assets.pokemon.com/assets/cms2/img/pokedex/detail';\r\n\r\nclass Pokecard extends Component {\r\n  render() {\r\n    const { id, name, type, exp } = this.props;\r\n    const imgSrc = `${POKE_API}/${id}.png`;\r\n    return (\r\n      <Card style={{ maxWidth: '180px' }}>\r\n        <CardContent\r\n          style={{\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center'\r\n          }}\r\n        >\r\n          <Typography variant=\"title\" color=\"primary\">\r\n            {name}\r\n          </Typography>\r\n          <img src={imgSrc} alt={name} height=\"150px\" />\r\n          <Typography variant=\"subtitle1\" align=\"center\">\r\n            Type: {type}\r\n            <br />\r\n            Exp: {exp}\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Pokecard;\r\n","import React, { Component } from 'react';\r\nimport Pokecard from './Pokecard';\r\nimport { Grid, Typography } from '@material-ui/core';\r\n\r\nclass Pokedex extends Component {\r\n  static defaultProps = {\r\n    pokemon: [\r\n      { id: '004', name: 'Charmander', type: 'fire', exp: 62 },\r\n      { id: '007', name: 'Squirtle', type: 'water', exp: 63 },\r\n      { id: '011', name: 'Metapod', type: 'bug', exp: 72 },\r\n      { id: '004', name: 'Charmander', type: 'fire', exp: 62 },\r\n      { id: '007', name: 'Squirtle', type: 'water', exp: 63 },\r\n      { id: '011', name: 'Metapod', type: 'bug', exp: 72 },\r\n      { id: '004', name: 'Charmander', type: 'fire', exp: 62 },\r\n      { id: '007', name: 'Squirtle', type: 'water', exp: 63 },\r\n      { id: '011', name: 'Metapod', type: 'bug', exp: 72 },\r\n      { id: '004', name: 'Charmander', type: 'fire', exp: 62 },\r\n      { id: '007', name: 'Squirtle', type: 'water', exp: 63 },\r\n      { id: '011', name: 'Metapod', type: 'bug', exp: 72 }\r\n    ]\r\n  };\r\n  render() {\r\n    return (\r\n      <Grid\r\n        container\r\n        justify=\"center\"\r\n        style={{ paddingBottom: '20px', background: '#eee' }}\r\n      >\r\n        <Grid\r\n          item\r\n          xs={8}\r\n          container\r\n          justify=\"center\"\r\n          style={{ padding: '40px' }}\r\n        >\r\n          <Typography variant=\"h4\" color=\"primary\">\r\n            Pokedex\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item lg={8} md={6} container spacing={40}>\r\n          {this.props.pokemon.map((p, i) => (\r\n            <Grid item lg={4} md={6} container justify=\"center\" key={i}>\r\n              <Pokecard id={p.id} name={p.name} type={p.type} exp={p.exp} />\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Pokedex;\r\n","import React from 'react';\nimport { CssBaseline } from '@material-ui/core';\nimport Pokedex from './Pokedex';\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <Pokedex />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}